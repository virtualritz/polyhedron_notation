[package]
name = "polyhedron-ops"
version = "0.2.10"
authors = ["Moritz Moeller <virtualritz@gmail.com>"]
edition = "2021"
keywords = ["3d", "creative", "geometry", "graphics", "rendering"]
categories = ["graphics", "mathematics", "multimedia", "rendering"]
license = "MIT OR Apache-2.0 OR Zlib"
description = "Conway/Hart Polyhedron Operations"
readme = "README.md"
repository = "https://github.com/virtualritz/polyhedron-ops/"
documentation = "https://docs.rs/polyhedron-ops/"

[features]
default = ["ops"]
bevy = ["dep:bevy", "dep:bevy_panorbit_camera"]
f64 = ["tobj/use_f64"] # Add support for double precision (64bit floating point)
nsi = ["dep:nsi-core", "dep:bytemuck"] # NSI support
obj = [
    "dep:tobj",
] # Add support for reading/writing a mesh out as a Wavefront OBJ.
parser = [
    "ops",
    "dep:pest",
    "dep:pest_derive",
] # Add support for parsing Conway notation strings and turning them back into polyhedra.
tilings = []

# Example features
console = ["bevy", "parser", "dep:bevy_console", "dep:clap"]
playground = ["obj", "dep:kiss3d"]

# Enabled Operators
ops = [
    "a",
    "b",
    "c",
    "d",
    "e",
    "g",
    "i",
    "j",
    "k",
    "m",
    "n",
    "o",
    "p",
    "q",
    "r",
    "s",
    "t",
    "v",
    "w",
    "x",
    "z",
    "K",
    "M",
    "N",
    "S",
    "Z",
]

# Operator Definitions
a = []              # (a)mbo
b = ["t", "a"]      # (b)evel
c = []              # (c)hamfer
d = []              # (d)ual
e = ["a", "a"]      # (e)xpand
g = []              # (g)yro
i = ["x"]           # (i)nset
j = ["d", "a", "d"] # (j)oin
k = []              # (k)is
m = ["k", "j"]      # (m)eta
n = ["d", "t"]      # (n)eedle
o = ["j", "j"]      # (o)rtho
p = []              # (p)ropellor
q = []              # (q)uinto
r = []              # (r)eflect
s = ["d", "g", "d"] # (s)nub
t = ["d", "k", "d"] # (t)runcate
v = []              # subdi(v)ide
w = []              # (w)hirl
x = []              # e(x)trude
z = ["d", "k"]      # (z)ip
K = ["d"]           # (K)-plane
M = ["d", "b"]      # (M)edial
N = []              # ca(N)onicalize
S = []              # (S)pherize
Z = []              # (Z)-triangulate

[dependencies]
bevy = { version = "0.14", default-features = false, features = [
    "bevy_pbr",
], optional = true }
bevy_console = { version = "0.12", optional = true }
bevy_panorbit_camera = { version = "0.19", optional = true }
bytemuck = { version = "1.19", features = [
    "extern_crate_alloc",
], optional = true }
clap = { version = "4.5", optional = true }
itertools = "0.13"
kiss3d = { version = "0.35", features = ["vertex_index_u32"], optional = true }
nsi-core = { version = "0.8", optional = true }
num-traits = "0.2"
pest = { version = "2.7", features = ["pretty-print"], optional = true }
pest_derive = { version = "2.7", optional = true }
rayon = "1.10"
tobj = { version = "4.0", optional = true }
ultraviolet = { version = "0.9", features = ["f64"] }

[target.'cfg(target_os = "linux")'.dependencies.bevy]
version = "*"
features = ["x11", "wayland"]
optional = true

[profile.dev]
opt-level = 1

[profile.dev.package."*"]
opt-level = 3
codegen-units = 1

[profile.release]
codegen-units = 1
lto = "thin"

[profile.wasm-release]
inherits = "release"
opt-level = "s"
strip = "debuginfo"

[[example]]
name = "playground"
required-features = ["playground"]

[[example]]
name = "bevy"
required-features = ["bevy"]

[package.metadata.docs.rs]
features = ["nsi", "obj", "parser"]

[patch.crates-io]
kiss3d = { git = "https://github.com/sebcrozet/kiss3d.git", branch = "master" }
